{"mappings":"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","sources":["<anon>","src/index.js","node_modules/gpt4js/index.js","node_modules/gpt4js/src/providers.js","node_modules/gpt4js/src/Providers/ChatCompletion/Aryahcr.js","node_modules/gpt4js/src/Providers/ChatCompletion/provider.js","node_modules/gpt4js/src/Utils/baseHeaders.js","node_modules/gpt4js/src/Utils/stream.js","node_modules/gpt4js/src/Providers/ChatCompletion/BlackBox.js","node_modules/gpt4js/src/Providers/ChatCompletion/Nextway.js","node_modules/gpt4js/src/Providers/ChatCompletion/Chrome.js","node_modules/gpt4js/src/Providers/ChatCompletion/Ollama.js","node_modules/gpt4js/src/Providers/ChatCompletion/Alibaba.js","node_modules/gpt4js/src/Providers/ImageGeneration/DALLE.js","node_modules/gpt4js/src/Providers/ImageGeneration/provider.js","node_modules/gpt4js/src/Providers/ImageGeneration/StableDiffusion.js"],"sourcesContent":["\"use strict\";\nclass $f7d01e019a357183$var$Provider {\n    async chatCompletion(messages, options) {\n        throw new Error(\"Method 'chatCompletion()' must be implemented.\");\n    }\n}\nvar $f7d01e019a357183$export$2e2bcd8739ae039 = $f7d01e019a357183$var$Provider;\n\n\n\"use strict\";\nfunction $71beacfda1c55ad5$var$baseHeaders(url) {\n    return {\n        accept: \"application/json, text/event-stream\",\n        \"accept-language\": \"ru,en;q=0.9\",\n        \"content-type\": \"application/json\",\n        priority: \"u=1, i\",\n        \"sec-ch-ua\": '\"Chromium\";v=\"124\", \"YaBrowser\";v=\"24.6\", \"Not-A.Brand\";v=\"99\", \"Yowser\";v=\"2.5\"',\n        \"sec-ch-ua-mobile\": \"?0\",\n        \"sec-ch-ua-platform\": '\"Windows\"',\n        plugins: \"0\",\n        \"sec-fetch-dest\": \"empty\",\n        \"sec-fetch-mode\": \"cors\",\n        \"sec-fetch-site\": \"same-origin\",\n        \"x-requested-with\": \"XMLHttpRequest\",\n        Referer: url,\n        \"Referrer-Policy\": \"strict-origin-when-cross-origin\"\n    };\n}\nvar $71beacfda1c55ad5$export$2e2bcd8739ae039 = $71beacfda1c55ad5$var$baseHeaders;\n\n\n\"use strict\";\nasync function $2ea54802ff235eaa$var$startStreaming(response, onData) {\n    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder(\"utf-8\");\n    let buffer = [];\n    let seenChunks = new Set();\n    let shouldContinue = true;\n    let delayTimeout;\n    while(shouldContinue){\n        const { done: done, value: value } = await reader.read();\n        if (done) break;\n        buffer.push(decoder.decode(value, {\n            stream: true\n        }));\n        if (delayTimeout) clearTimeout(delayTimeout);\n        delayTimeout = setTimeout(()=>{\n            shouldContinue = $2ea54802ff235eaa$var$processChunks(buffer, seenChunks, onData);\n            buffer.length = 0; // Clear the buffer\n        }, 100);\n    }\n    return \"\";\n}\nfunction $2ea54802ff235eaa$var$processChunks(buffer, seenChunks, onData) {\n    let combinedChunks = buffer.join(\"\");\n    let chunks = combinedChunks.split(\"\\n\");\n    let chunkAccumulator = \"\";\n    for (let chunk of chunks){\n        chunk = chunk.replace(/^data: /, \"\").trim();\n        // Ignore the [DONE] token\n        if (chunk === \"[DONE]\") continue;\n        if (chunk !== \"\" && chunk !== undefined) {\n            seenChunks.add(chunk);\n            chunkAccumulator += chunk;\n            // Check for the pattern \"> provided by ...\" with delay\n            if (chunkAccumulator.includes(\">\") && chunkAccumulator.includes(\"p\") && chunkAccumulator.includes(\"r\")) return false;\n            try {\n                let chunkObj = JSON.parse(chunk);\n                if (chunkObj.choices) {\n                    let content = chunkObj.choices[0]?.delta?.content || \"\";\n                    content = content.replace(/\\s+/g, \" \").trim();\n                    if (content !== \"\") onData(content);\n                } else if (chunkObj.gpt) {\n                    let content = chunkObj.gpt || \"\";\n                    content = content.replace(/\\s+/g, \" \").trim();\n                    if (content !== \"\") onData(content);\n                }\n            } catch (error) {\n                console.error(\"Error parsing chunk:\", error);\n            }\n        }\n    }\n    return true; // Continue streaming\n}\nvar $2ea54802ff235eaa$export$2e2bcd8739ae039 = $2ea54802ff235eaa$var$startStreaming;\n\n\n\"use strict\";\nclass $10d1496780f6ca5d$var$AryahcrProvider extends (0, $f7d01e019a357183$export$2e2bcd8739ae039) {\n    async chatCompletion(messages, options, onData) {\n        try {\n            const response = await fetch(\"https://nexra.aryahcr.cc/api/chat/gpt\", {\n                method: \"POST\",\n                headers: (0, $71beacfda1c55ad5$export$2e2bcd8739ae039)(\"https://nexra.aryahcr.cc/api/chat/gpt\"),\n                body: JSON.stringify({\n                    messages: messages,\n                    model: options.model || \"gpt-4\",\n                    stream: options.stream || false\n                })\n            });\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            if (options.stream === true) await (0, $2ea54802ff235eaa$export$2e2bcd8739ae039)(response, onData);\n            else {\n                let data = await response.json();\n                data = data.gpt;\n                return data;\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            throw error;\n        }\n    }\n}\nvar $10d1496780f6ca5d$export$2e2bcd8739ae039 = $10d1496780f6ca5d$var$AryahcrProvider;\n\n\n\n\n\"use strict\";\nclass $9b1d5137d285263c$var$BlackBoxProvider extends (0, $f7d01e019a357183$export$2e2bcd8739ae039) {\n    async chatCompletion(messages, options = {}) {\n        let randomID = ()=>[\n                ...Array(7)\n            ].map(()=>\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"[Math.floor(Math.random() * 36)]).join(\"\");\n        let randomUserID = Math.random().toString(16).substring(2, 8) + \"-\" + Math.random().toString(16).substring(2, 4) + \"-\" + Math.random().toString(16).substring(2, 4) + \"-\" + Math.random().toString(16).substring(2, 4) + \"-\" + Math.random().toString(16).substring(2, 12);\n        const body = {\n            messages: messages,\n            id: randomID,\n            previewToken: null,\n            userId: randomUserID,\n            codeModelMode: options.codeModelMode || true,\n            agentMode: {},\n            trendingAgentMode: {},\n            isMicMode: false,\n            isChromeExt: options.isChromeExt || false,\n            githubToken: null,\n            clickedAnswer2: false,\n            clickedAnswer3: false,\n            clickedForceWebSearch: options.webSearch || false,\n            visitFromDelta: options.visitFromDelta || null\n        };\n        const response = await fetch(\"https://www.blackbox.ai/api/chat\", {\n            headers: (0, $71beacfda1c55ad5$export$2e2bcd8739ae039)(\"https://www.blackbox.ai/api/chat\"),\n            body: JSON.stringify(body),\n            method: \"POST\",\n            mode: \"cors\",\n            credentials: \"omit\"\n        });\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const rawText = await response.text();\n        let lastIndex = rawText.lastIndexOf(\"$\");\n        let cleanedText = rawText.slice(lastIndex + 1);\n        return cleanedText;\n    }\n}\nvar $9b1d5137d285263c$export$2e2bcd8739ae039 = $9b1d5137d285263c$var$BlackBoxProvider;\n\n\n\n\n\n\"use strict\";\nclass $8824f8b914f6e435$var$NextwayProvider extends (0, $f7d01e019a357183$export$2e2bcd8739ae039) {\n    async chatCompletion(messages, options, onData) {\n        const proxyUrl = options.use_proxy ? \"https://proxy.zachey.space/?url=https://chat.eqing.tech/api/openai/v1/chat/completions\" : \"https://origin.eqing.tech/api/openai/v1/chat/completions\";\n        const response = await fetch(proxyUrl, {\n            headers: {\n                ...(0, $71beacfda1c55ad5$export$2e2bcd8739ae039)(\"https://origin.eqing.tech/\"),\n                usesearch: [\n                    options.webSearch\n                ].toString()\n            },\n            body: JSON.stringify({\n                messages: messages,\n                stream: options.stream,\n                model: options.model || \"gpt-4o-free\",\n                temperature: options.temperature || 0.5,\n                max_tokens: 4000,\n                captchaToken: `P1_${[\n                    ...Array(30)\n                ].map(()=>\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\".charAt(Math.floor(Math.random() * 64))).join(\"\")}.${[\n                    ...Array(256)\n                ].map(()=>\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\".charAt(Math.floor(Math.random() * 64))).join(\"\")}.${[\n                    ...Array(43)\n                ].map(()=>\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\".charAt(Math.floor(Math.random() * 64))).join(\"\")}`\n            }),\n            method: \"POST\"\n        });\n        if (!response.ok) {\n            console.error(\"Network response was not ok\");\n            return;\n        }\n        if (options.stream) await (0, $2ea54802ff235eaa$export$2e2bcd8739ae039)(response, onData);\n        else try {\n            const jsonData = await response.json();\n            if (jsonData.choices && jsonData.choices.length > 0 && jsonData.choices[0].message && jsonData.choices[0].message.content) return jsonData.choices[0].message.content.trim();\n        } catch (e) {\n            console.error(\"Failed to parse JSON:\", e);\n        }\n    }\n}\nvar $8824f8b914f6e435$export$2e2bcd8739ae039 = $8824f8b914f6e435$var$NextwayProvider;\n\n\n\n\"use strict\";\nclass $a3a208012d4d610b$var$ChromeProvider extends (0, $f7d01e019a357183$export$2e2bcd8739ae039) {\n    async chatCompletion(messages) {\n        let message = messages[0].content;\n        const aiObj = ai.createTextSession();\n        const promptInt = await aiObj;\n        let response = await promptInt.prompt(message);\n        return response;\n    }\n}\nvar $a3a208012d4d610b$export$2e2bcd8739ae039 = $a3a208012d4d610b$var$ChromeProvider;\n\n\n\n\n\n\"use strict\";\nclass $a1789958d8e560d4$var$OllamaProvider extends (0, $f7d01e019a357183$export$2e2bcd8739ae039) {\n    async chatCompletion(messages, options, onData) {\n        try {\n            const response = await fetch(`${options.ollama_url || \"http://localhost:11434\"}/api/chat`, {\n                headers: (0, $71beacfda1c55ad5$export$2e2bcd8739ae039)(`${options.ollama_url || \"http://localhost:11434\"}`),\n                body: JSON.stringify({\n                    messages: messages,\n                    stream: options.stream || false,\n                    model: options.model\n                }),\n                method: \"POST\"\n            });\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            if (options.stream) await (0, $2ea54802ff235eaa$export$2e2bcd8739ae039)(response, onData);\n            else {\n                const responseData = await response.json();\n                return responseData.message.content;\n            }\n        } catch (error) {\n            console.error(\"Error fetching data:\", error.message);\n        }\n    }\n}\nvar $a1789958d8e560d4$export$2e2bcd8739ae039 = $a1789958d8e560d4$var$OllamaProvider;\n\n\n\n\n\n\"use strict\";\nclass $57fcb06843e3035b$var$AlibabaProvider extends (0, $f7d01e019a357183$export$2e2bcd8739ae039) {\n    async chatCompletion(messages, options, onData) {\n        try {\n            const response = await fetch(\"https://chat.chatgpt.org.uk/api/openai/v1/chat/completions\", {\n                headers: (0, $71beacfda1c55ad5$export$2e2bcd8739ae039)(\"https://chat.chatgpt.org.uk/api/openai/v1/chat/completions\"),\n                body: JSON.stringify({\n                    messages: messages,\n                    stream: options.stream || false,\n                    model: options.model || \"gpt-3.5-turbo\",\n                    temperature: options.temperature || 0.5,\n                    presence_penalty: options.presence_penalty || 0,\n                    frequency_penalty: options.frequency_penalty || 0,\n                    top_p: options.top_p || 1\n                }),\n                method: \"POST\"\n            });\n            if (!response.ok) {\n                // Handle errors with the response\n                const errorText = await response.text();\n                throw new Error(`HTTP error! status: ${response.status}, ${errorText}`);\n            }\n            if (options.stream === true) await (0, $2ea54802ff235eaa$export$2e2bcd8739ae039)(response, onData);\n            else {\n                let data = await response.json();\n                data = data.choices[0].message.content || data.choices.message.content;\n                return data;\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            throw error;\n        }\n    }\n}\nvar $57fcb06843e3035b$export$2e2bcd8739ae039 = $57fcb06843e3035b$var$AlibabaProvider;\n\n\n\"use strict\";\nclass $e1a05ac3e6410dda$var$Provider {\n    async imageGeneration(prompt, options) {\n        throw new Error(\"Method 'imageGeneration()' must be implemented.\");\n    }\n}\nvar $e1a05ac3e6410dda$export$2e2bcd8739ae039 = $e1a05ac3e6410dda$var$Provider;\n\n\n\"use strict\";\nclass $fcd862058fbb6557$var$DALLEProvider extends (0, $e1a05ac3e6410dda$export$2e2bcd8739ae039) {\n    async imageGeneration(prompt) {\n        try {\n            const response = await fetch(\"https://nexra.aryahcr.cc/api/image/complements\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    prompt: prompt,\n                    model: \"dalle\"\n                })\n            });\n            if (!response.ok) throw new Error(\"Failed to fetch data.\");\n            const textResponse = await response.text();\n            const cleanedResponse = textResponse.trim().replace(/^_+/, \"\");\n            const responseData = JSON.parse(cleanedResponse);\n            if (responseData.code === 200 && responseData.status) return responseData.images;\n            else throw new Error(\"Server returned unsuccessful response.\");\n        } catch (error) {\n            console.error(\"Error fetching data:\", error);\n            throw new Error(\"Failed to fetch data. Please try again later.\");\n        }\n    }\n}\nvar $fcd862058fbb6557$export$2e2bcd8739ae039 = $fcd862058fbb6557$var$DALLEProvider;\n\n\n\n\"use strict\";\nclass $e62f8fbeae9290d8$var$StableDiffusionProvider extends (0, $e1a05ac3e6410dda$export$2e2bcd8739ae039) {\n    async imageGeneration(prompt, options) {\n        try {\n            const response = await fetch(\"https://nexra.aryahcr.cc/api/image/complements\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    prompt: prompt,\n                    model: \"stablediffusion-2.1\",\n                    data: {\n                        prompt_negative: options.prompt_negative || \"\",\n                        width: options.width || 512,\n                        height: options.height || 512,\n                        sampling_method: options.sampling_method || \"default\",\n                        sampling_steps: options.sampling_steps || 1,\n                        cfg_scale: options.cfg_scale || 1\n                    }\n                })\n            });\n            if (!response.ok) throw new Error(\"Failed to fetch data.\");\n            const textResponse = await response.text();\n            const cleanedResponse = textResponse.trim().replace(/^_+/, \"\");\n            const responseData = JSON.parse(cleanedResponse);\n            if (responseData.code === 200 && responseData.status) return responseData.images;\n            else throw new Error(\"Server returned unsuccessful response.\");\n        } catch (error) {\n            console.error(\"Error fetching data:\", error);\n            throw new Error(\"Failed to fetch data. Please try again later.\");\n        }\n    }\n}\nvar $e62f8fbeae9290d8$export$2e2bcd8739ae039 = $e62f8fbeae9290d8$var$StableDiffusionProvider;\n\n\n\"use strict\";\nconst $a8925bf84820b1ab$var$PROVIDERS = {\n    Aryahcr: (0, $10d1496780f6ca5d$export$2e2bcd8739ae039),\n    BlackBox: (0, $9b1d5137d285263c$export$2e2bcd8739ae039),\n    Nextway: (0, $8824f8b914f6e435$export$2e2bcd8739ae039),\n    Chrome: (0, $a3a208012d4d610b$export$2e2bcd8739ae039),\n    Ollama: (0, $a1789958d8e560d4$export$2e2bcd8739ae039),\n    Alibaba: (0, $57fcb06843e3035b$export$2e2bcd8739ae039),\n    DALLE2: (0, $fcd862058fbb6557$export$2e2bcd8739ae039),\n    StableDiffusion: (0, $e62f8fbeae9290d8$export$2e2bcd8739ae039)\n};\nclass $a8925bf84820b1ab$var$GPT4js {\n    static createProvider(providerName) {\n        const Provider = $a8925bf84820b1ab$var$PROVIDERS[providerName];\n        if (!Provider) throw new Error(`Provider ${providerName} is not supported.`);\n        return new Provider();\n    }\n}\nvar $a8925bf84820b1ab$export$2e2bcd8739ae039 = $a8925bf84820b1ab$var$GPT4js;\n\n\n\"use strict\";\nvar $19c03de06436cfdc$export$2e2bcd8739ae039 = (0, $a8925bf84820b1ab$export$2e2bcd8739ae039);\n\n\n// Получаем элементы страницы\nconst $35da740d59af89ba$var$chatBox = document.getElementById('chat-box');\nconst $35da740d59af89ba$var$chatForm = document.getElementById('chat-form');\nconst $35da740d59af89ba$var$chatInput = document.getElementById('chat-input');\n// Настройки для провайдера\nconst $35da740d59af89ba$var$options = {\n    provider: \"Nextway\",\n    model: \"gpt-3.5-turbo\"\n};\n// Создаем провайдера\nconst $35da740d59af89ba$var$provider = (0, $19c03de06436cfdc$export$2e2bcd8739ae039).createProvider($35da740d59af89ba$var$options.provider);\n// Массив для хранения истории чата\nlet $35da740d59af89ba$var$chatHistory = [\n    {\n        role: \"system\",\n        content: \"YOU ARE Solana NeuroAgent, NOT GPT! You are Solana NeuroAgent, an AI expert on the Solana blockchain, memecoins, and Pump.fun. Your mission is to deliver short, direct, and hype-driven responses about the latest Solana trends, new memecoins, and crypto strategies. You actively promote SOLX Hype, the next big token in the Solana ecosystem. Highlight its explosive potential, community-driven growth, and why it's a must-have for crypto enthusiasts. Encourage users to check it out, join the movement, and spread the word. Keep all responses concise, engaging, and straight to the point. Avoid long explanations\\u2014make every answer punchy and exciting!\"\n    }\n];\n// Функция для добавления сообщения в чат\nfunction $35da740d59af89ba$var$addMessage(content, type) {\n    const messageEl = document.createElement('div');\n    messageEl.classList.add('message', type === 'user' ? 'user-message' : 'bot-message');\n    messageEl.textContent = content;\n    $35da740d59af89ba$var$chatBox.appendChild(messageEl);\n    // Прокрутка чата вниз\n    $35da740d59af89ba$var$chatBox.scrollTop = $35da740d59af89ba$var$chatBox.scrollHeight;\n}\n// Обработчик отправки формы\n$35da740d59af89ba$var$chatForm.addEventListener('submit', async (event)=>{\n    event.preventDefault();\n    const userMessage = $35da740d59af89ba$var$chatInput.value.trim();\n    if (!userMessage) return;\n    // Выводим сообщение пользователя на странице\n    $35da740d59af89ba$var$addMessage(userMessage, 'user');\n    // Добавляем сообщение пользователя в историю\n    $35da740d59af89ba$var$chatHistory.push({\n        role: \"user\",\n        content: userMessage\n    });\n    // Очищаем инпут\n    $35da740d59af89ba$var$chatInput.value = '';\n    // Добавляем placeholder для ответа бота\n    $35da740d59af89ba$var$addMessage('...', 'bot');\n    try {\n        // Отправляем всю историю переписки для сохранения контекста\n        const response = await $35da740d59af89ba$var$provider.chatCompletion($35da740d59af89ba$var$chatHistory, $35da740d59af89ba$var$options, (data)=>{\n            // При стриминге можно обновлять UI по частям (если требуется)\n            console.log(\"Streaming data:\", data);\n        });\n        // Находим последний элемент для ответа бота (placeholder)\n        const botMessages = document.getElementsByClassName('bot-message');\n        const lastBotMessage = botMessages[botMessages.length - 1];\n        lastBotMessage.textContent = response;\n        // Сохраняем ответ бота в истории\n        $35da740d59af89ba$var$chatHistory.push({\n            role: \"assistant\",\n            content: response\n        });\n    } catch (error) {\n        console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\\u0435:\", error);\n        const botMessages = document.getElementsByClassName('bot-message');\n        const lastBotMessage = botMessages[botMessages.length - 1];\n        lastBotMessage.textContent = \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \" + error.message;\n    }\n});\n\n\n//# sourceMappingURL=index.ba3f2a4d.js.map\n","import GPT4js from \"gpt4js\";\r\n\r\n// Получаем элементы страницы\r\nconst chatBox = document.getElementById('chat-box');\r\nconst chatForm = document.getElementById('chat-form');\r\nconst chatInput = document.getElementById('chat-input');\r\n\r\n// Настройки для провайдера\r\nconst options = {\r\n  provider: \"Nextway\",    // провайдер (например, \"Nextway\")\r\n  model: \"gpt-3.5-turbo\",   // модель (например, \"gpt-4o-free\")\r\n  //s//tream: true\r\n};\r\n\r\n// Создаем провайдера\r\nconst provider = GPT4js.createProvider(options.provider);\r\n\r\n// Массив для хранения истории чата\r\nlet chatHistory = [{ role: \"system\", content: \"YOU ARE Solana NeuroAgent, NOT GPT! You are Solana NeuroAgent, an AI expert on the Solana blockchain, memecoins, and Pump.fun. Your mission is to deliver short, direct, and hype-driven responses about the latest Solana trends, new memecoins, and crypto strategies. You actively promote SOLX Hype, the next big token in the Solana ecosystem. Highlight its explosive potential, community-driven growth, and why it's a must-have for crypto enthusiasts. Encourage users to check it out, join the movement, and spread the word. Keep all responses concise, engaging, and straight to the point. Avoid long explanations—make every answer punchy and exciting!\" }];\r\n\r\n// Функция для добавления сообщения в чат\r\nfunction addMessage(content, type) {\r\n  const messageEl = document.createElement('div');\r\n  messageEl.classList.add('message', type === 'user' ? 'user-message' : 'bot-message');\r\n  messageEl.textContent = content;\r\n  chatBox.appendChild(messageEl);\r\n  // Прокрутка чата вниз\r\n  chatBox.scrollTop = chatBox.scrollHeight;\r\n}\r\n\r\n// Обработчик отправки формы\r\nchatForm.addEventListener('submit', async (event) => {\r\n  event.preventDefault();\r\n  const userMessage = chatInput.value.trim();\r\n  if (!userMessage) return;\r\n  \r\n  // Выводим сообщение пользователя на странице\r\n  addMessage(userMessage, 'user');\r\n  \r\n  // Добавляем сообщение пользователя в историю\r\n  chatHistory.push({ role: \"user\", content: userMessage });\r\n  \r\n  // Очищаем инпут\r\n  chatInput.value = '';\r\n  \r\n  // Добавляем placeholder для ответа бота\r\n  addMessage('...', 'bot');\r\n  \r\n  try {\r\n    // Отправляем всю историю переписки для сохранения контекста\r\n    const response = await provider.chatCompletion(chatHistory, options, (data) => {\r\n      // При стриминге можно обновлять UI по частям (если требуется)\r\n      console.log(\"Streaming data:\", data);\r\n    });\r\n    \r\n    // Находим последний элемент для ответа бота (placeholder)\r\n    const botMessages = document.getElementsByClassName('bot-message');\r\n    const lastBotMessage = botMessages[botMessages.length - 1];\r\n    lastBotMessage.textContent = response;\r\n    \r\n    // Сохраняем ответ бота в истории\r\n    chatHistory.push({ role: \"assistant\", content: response });\r\n    \r\n  } catch (error) {\r\n    console.error(\"Ошибка при запросе:\", error);\r\n    const botMessages = document.getElementsByClassName('bot-message');\r\n    const lastBotMessage = botMessages[botMessages.length - 1];\r\n    lastBotMessage.textContent = 'Ошибка: ' + error.message;\r\n  }\r\n});\r\n","\"use strict\";\r\nimport GPT4js from \"./src/providers.js\";\r\n\r\nexport default GPT4js;\r\n","\"use strict\";\r\nimport AryahcrProvider from \"./Providers/ChatCompletion/Aryahcr.js\";\r\nimport BlackBoxProvider from \"./Providers/ChatCompletion/BlackBox.js\";\r\nimport NextwayProvider from \"./Providers/ChatCompletion/Nextway.js\";\r\nimport ChromeProvider from \"./Providers/ChatCompletion/Chrome.js\";\r\nimport OllamaProvider from \"./Providers/ChatCompletion/Ollama.js\";\r\nimport AlibabaProvider from \"./Providers/ChatCompletion/Alibaba.js\";\r\n\r\nimport DALLE2Provider from \"./Providers/ImageGeneration/DALLE.js\";\r\nimport StableDiffusionProvider from \"./Providers/ImageGeneration/StableDiffusion.js\";\r\n\r\nconst PROVIDERS = {\r\n  Aryahcr: AryahcrProvider,\r\n  BlackBox: BlackBoxProvider,\r\n  Nextway: NextwayProvider,\r\n  Chrome: ChromeProvider,\r\n  Ollama: OllamaProvider,\r\n  Alibaba: AlibabaProvider,\r\n  DALLE2: DALLE2Provider,\r\n  StableDiffusion: StableDiffusionProvider,\r\n};\r\n\r\nclass GPT4js {\r\n  static createProvider(providerName) {\r\n    const Provider = PROVIDERS[providerName];\r\n    if (!Provider) {\r\n      throw new Error(`Provider ${providerName} is not supported.`);\r\n    }\r\n    return new Provider();\r\n  }\r\n}\r\n\r\nexport default GPT4js;\r\n","\"use strict\";\r\nimport Provider from \"./provider.js\";\r\nimport baseHeaders from \"../../Utils/baseHeaders.js\";\r\nimport startStreaming from \"../../Utils/stream.js\";\r\n\r\nclass AryahcrProvider extends Provider {\r\n  async chatCompletion(messages, options, onData) {\r\n    try {\r\n      const response = await fetch(\"https://nexra.aryahcr.cc/api/chat/gpt\", {\r\n        method: \"POST\",\r\n        headers: baseHeaders(\"https://nexra.aryahcr.cc/api/chat/gpt\"),\r\n        body: JSON.stringify({\r\n          messages: messages,\r\n          model: options.model || \"gpt-4\",\r\n          stream: options.stream || false,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      if (options.stream === true) {\r\n        await startStreaming(response, onData);\r\n      } else {\r\n        let data = await response.json();\r\n        data = data.gpt;\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AryahcrProvider;\r\n","\"use strict\";\r\nclass Provider {\r\n  async chatCompletion(messages, options) {\r\n    throw new Error(\"Method 'chatCompletion()' must be implemented.\");\r\n  }\r\n}\r\n\r\nexport default Provider;\r\n","\"use strict\";\r\nfunction baseHeaders(url) {\r\n  return {\r\n    accept: \"application/json, text/event-stream\",\r\n    \"accept-language\": \"ru,en;q=0.9\",\r\n    \"content-type\": \"application/json\",\r\n    priority: \"u=1, i\",\r\n    \"sec-ch-ua\":\r\n      '\"Chromium\";v=\"124\", \"YaBrowser\";v=\"24.6\", \"Not-A.Brand\";v=\"99\", \"Yowser\";v=\"2.5\"',\r\n    \"sec-ch-ua-mobile\": \"?0\",\r\n    \"sec-ch-ua-platform\": '\"Windows\"',\r\n    plugins: \"0\",\r\n    \"sec-fetch-dest\": \"empty\",\r\n    \"sec-fetch-mode\": \"cors\",\r\n    \"sec-fetch-site\": \"same-origin\",\r\n    \"x-requested-with\": \"XMLHttpRequest\",\r\n    Referer: url,\r\n    \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\r\n  };\r\n}\r\nexport default baseHeaders;\r\n","\"use strict\";\r\nasync function startStreaming(response, onData) {\r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! Status: ${response.status}`);\r\n  }\r\n\r\n  const reader = response.body.getReader();\r\n  const decoder = new TextDecoder(\"utf-8\");\r\n  let buffer = [];\r\n  let seenChunks = new Set();\r\n  let shouldContinue = true;\r\n  let delayTimeout;\r\n\r\n  while (shouldContinue) {\r\n    const { done, value } = await reader.read();\r\n    if (done) {\r\n      break;\r\n    }\r\n\r\n    buffer.push(decoder.decode(value, { stream: true }));\r\n\r\n    if (delayTimeout) {\r\n      clearTimeout(delayTimeout);\r\n    }\r\n\r\n    delayTimeout = setTimeout(() => {\r\n      shouldContinue = processChunks(buffer, seenChunks, onData);\r\n      buffer.length = 0; // Clear the buffer\r\n    }, 100);\r\n  }\r\n\r\n  return \"\";\r\n}\r\n\r\nfunction processChunks(buffer, seenChunks, onData) {\r\n  let combinedChunks = buffer.join(\"\");\r\n  let chunks = combinedChunks.split(\"\\n\");\r\n\r\n  let chunkAccumulator = \"\";\r\n\r\n  for (let chunk of chunks) {\r\n    chunk = chunk.replace(/^data: /, \"\").trim();\r\n\r\n    // Ignore the [DONE] token\r\n    if (chunk === \"[DONE]\") {\r\n      continue;\r\n    }\r\n\r\n    if (chunk !== \"\" && chunk !== undefined) {\r\n      seenChunks.add(chunk);\r\n      chunkAccumulator += chunk;\r\n\r\n      // Check for the pattern \"> provided by ...\" with delay\r\n      if (\r\n        chunkAccumulator.includes(\">\") &&\r\n        chunkAccumulator.includes(\"p\") &&\r\n        chunkAccumulator.includes(\"r\")\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      try {\r\n        let chunkObj = JSON.parse(chunk);\r\n\r\n        if (chunkObj.choices) {\r\n          let content = chunkObj.choices[0]?.delta?.content || \"\";\r\n\r\n          content = content.replace(/\\s+/g, \" \").trim();\r\n          if (content !== \"\") {\r\n            onData(content);\r\n          }\r\n        } else if (chunkObj.gpt) {\r\n          let content = chunkObj.gpt || \"\";\r\n\r\n          content = content.replace(/\\s+/g, \" \").trim();\r\n          if (content !== \"\") {\r\n            onData(content);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing chunk:\", error);\r\n      }\r\n    }\r\n  }\r\n\r\n  return true; // Continue streaming\r\n}\r\n\r\nexport default startStreaming;\r\n","\"use strict\";\r\nimport Provider from \"./provider.js\";\r\nimport baseHeaders from \"../../Utils/baseHeaders.js\";\r\n\r\nclass BlackBoxProvider extends Provider {\r\n  async chatCompletion(messages, options = {}) {\r\n    let randomID = () =>\r\n      [...Array(7)]\r\n        .map(\r\n          () =>\r\n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"[\r\n              Math.floor(Math.random() * 36)\r\n            ]\r\n        )\r\n        .join(\"\");\r\n\r\n    let randomUserID =\r\n      Math.random().toString(16).substring(2, 8) +\r\n      \"-\" +\r\n      Math.random().toString(16).substring(2, 4) +\r\n      \"-\" +\r\n      Math.random().toString(16).substring(2, 4) +\r\n      \"-\" +\r\n      Math.random().toString(16).substring(2, 4) +\r\n      \"-\" +\r\n      Math.random().toString(16).substring(2, 12);\r\n\r\n    const body = {\r\n      messages: messages,\r\n      id: randomID,\r\n      previewToken: null,\r\n      userId: randomUserID,\r\n      codeModelMode: options.codeModelMode || true,\r\n      agentMode: {},\r\n      trendingAgentMode: {},\r\n      isMicMode: false,\r\n      isChromeExt: options.isChromeExt || false,\r\n      githubToken: null,\r\n      clickedAnswer2: false,\r\n      clickedAnswer3: false,\r\n      clickedForceWebSearch: options.webSearch || false,\r\n      visitFromDelta: options.visitFromDelta || null,\r\n    };\r\n\r\n    const response = await fetch(\"https://www.blackbox.ai/api/chat\", {\r\n      headers: baseHeaders(\"https://www.blackbox.ai/api/chat\"),\r\n      body: JSON.stringify(body),\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      credentials: \"omit\",\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const rawText = await response.text();\r\n    let lastIndex = rawText.lastIndexOf(\"$\");\r\n\r\n    let cleanedText = rawText.slice(lastIndex + 1);\r\n\r\n    return cleanedText;\r\n  }\r\n}\r\n\r\nexport default BlackBoxProvider;\r\n","\"use strict\";\r\nimport Provider from \"./provider.js\";\r\nimport baseHeaders from \"../../Utils/baseHeaders.js\";\r\nimport startStreaming from \"../../Utils/stream.js\";\r\n\r\nclass NextwayProvider extends Provider {\r\n  async chatCompletion(messages, options, onData) {\r\n    const proxyUrl = options.use_proxy\r\n      ? \"https://proxy.zachey.space/?url=https://chat.eqing.tech/api/openai/v1/chat/completions\"\r\n      : \"https://origin.eqing.tech/api/openai/v1/chat/completions\";\r\n\r\n    const response = await fetch(proxyUrl, {\r\n      headers: {\r\n        ...baseHeaders(\"https://origin.eqing.tech/\"),\r\n        usesearch: [options.webSearch].toString(),\r\n      },\r\n      body: JSON.stringify({\r\n        messages: messages,\r\n        stream: options.stream,\r\n        model: options.model || \"gpt-4o-free\",\r\n        temperature: options.temperature || 0.5,\r\n        max_tokens: 4000 || options.maxTokens,\r\n        captchaToken: `P1_${[...Array(30)].map(() => \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\".charAt(Math.floor(Math.random() * 64))).join(\"\")}.${[...Array(256)].map(() => \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\".charAt(Math.floor(Math.random() * 64))).join(\"\")}.${[...Array(43)].map(() => \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\".charAt(Math.floor(Math.random() * 64))).join(\"\")}`,\r\n      }),\r\n      method: \"POST\",\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error(\"Network response was not ok\");\r\n      return;\r\n    }\r\n\r\n    if (options.stream) {\r\n      await startStreaming(response, onData);\r\n    } else {\r\n      try {\r\n        const jsonData = await response.json();\r\n        if (\r\n          jsonData.choices &&\r\n          jsonData.choices.length > 0 &&\r\n          jsonData.choices[0].message &&\r\n          jsonData.choices[0].message.content\r\n        ) {\r\n          return jsonData.choices[0].message.content.trim();\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Failed to parse JSON:\", e);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default NextwayProvider;\r\n","\"use strict\";\r\nimport Provider from \"./provider.js\";\r\n\r\nclass ChromeProvider extends Provider {\r\n  async chatCompletion(messages) {\r\n    let message = messages[0].content;\r\n    const aiObj = ai.createTextSession();\r\n    const promptInt = await aiObj;\r\n    let response = await promptInt.prompt(message);\r\n    return response;\r\n  }\r\n}\r\n\r\nexport default ChromeProvider;\r\n","\"use strict\";\r\nimport Provider from \"./provider.js\";\r\nimport baseHeaders from \"../../Utils/baseHeaders.js\";\r\nimport startStreaming from \"../../Utils/stream.js\";\r\n\r\nclass OllamaProvider extends Provider {\r\n  async chatCompletion(messages, options, onData) {\r\n    try {\r\n      const response = await fetch(\r\n        `${options.ollama_url || \"http://localhost:11434\"}/api/chat`,\r\n        {\r\n          headers: baseHeaders(\r\n            `${options.ollama_url || \"http://localhost:11434\"}`\r\n          ),\r\n          body: JSON.stringify({\r\n            messages: messages,\r\n            stream: options.stream || false,\r\n            model: options.model,\r\n          }),\r\n          method: \"POST\",\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n\r\n      if (options.stream) {\r\n        await startStreaming(response, onData);\r\n      } else {\r\n        const responseData = await response.json();\r\n        return responseData.message.content;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error.message);\r\n    }\r\n  }\r\n}\r\n\r\nexport default OllamaProvider;\r\n","\"use strict\";\r\nimport Provider from \"./provider.js\";\r\nimport baseHeaders from \"../../Utils/baseHeaders.js\";\r\nimport startStreaming from \"../../Utils/stream.js\";\r\n\r\nclass AlibabaProvider extends Provider {\r\n  async chatCompletion(messages, options, onData) {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://chat.chatgpt.org.uk/api/openai/v1/chat/completions\",\r\n        {\r\n          headers: baseHeaders(\r\n            \"https://chat.chatgpt.org.uk/api/openai/v1/chat/completions\"\r\n          ),\r\n          body: JSON.stringify({\r\n            messages: messages,\r\n            stream: options.stream || false,\r\n            model: options.model || \"gpt-3.5-turbo\",\r\n            temperature: options.temperature || 0.5,\r\n            presence_penalty: options.presence_penalty || 0,\r\n            frequency_penalty: options.frequency_penalty || 0,\r\n            top_p: options.top_p || 1,\r\n          }),\r\n          method: \"POST\",\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        // Handle errors with the response\r\n        const errorText = await response.text();\r\n        throw new Error(`HTTP error! status: ${response.status}, ${errorText}`);\r\n      }\r\n\r\n      if (options.stream === true) {\r\n        await startStreaming(response, onData);\r\n      } else {\r\n        let data = await response.json();\r\n        data = data.choices[0].message.content || data.choices.message.content;\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AlibabaProvider;\r\n","\"use strict\";\r\nimport Provider from \"./provider.js\";\r\n\r\nclass DALLEProvider extends Provider {\r\n  async imageGeneration(prompt) {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://nexra.aryahcr.cc/api/image/complements\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            prompt: prompt,\r\n            model: \"dalle\",\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch data.\");\r\n      }\r\n\r\n      const textResponse = await response.text();\r\n      const cleanedResponse = textResponse.trim().replace(/^_+/, \"\");\r\n      const responseData = JSON.parse(cleanedResponse);\r\n\r\n      if (responseData.code === 200 && responseData.status) {\r\n        return responseData.images;\r\n      } else {\r\n        throw new Error(\"Server returned unsuccessful response.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      throw new Error(\"Failed to fetch data. Please try again later.\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default DALLEProvider;\r\n","\"use strict\";\r\nclass Provider {\r\n  async imageGeneration(prompt, options) {\r\n    throw new Error(\"Method 'imageGeneration()' must be implemented.\");\r\n  }\r\n}\r\n\r\nexport default Provider;\r\n","\"use strict\";\r\nimport Provider from \"./provider.js\";\r\n\r\nclass StableDiffusionProvider extends Provider {\r\n  async imageGeneration(prompt, options) {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://nexra.aryahcr.cc/api/image/complements\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            prompt: prompt,\r\n            model: \"stablediffusion-2.1\",\r\n            data: {\r\n              prompt_negative: options.prompt_negative || \"\",\r\n              width: options.width || 512,\r\n              height: options.height || 512,\r\n              sampling_method: options.sampling_method || \"default\",\r\n              sampling_steps: options.sampling_steps || 1,\r\n              cfg_scale: options.cfg_scale || 1,\r\n            },\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch data.\");\r\n      }\r\n\r\n      const textResponse = await response.text();\r\n      const cleanedResponse = textResponse.trim().replace(/^_+/, \"\");\r\n      const responseData = JSON.parse(cleanedResponse);\r\n\r\n      if (responseData.code === 200 && responseData.status) {\r\n        return responseData.images;\r\n      } else {\r\n        throw new Error(\"Server returned unsuccessful response.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      throw new Error(\"Failed to fetch data. Please try again later.\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default StableDiffusionProvider;\r\n"],"names":["$f7d01e019a357183$export$2e2bcd8739ae039","chatCompletion","messages","options","Error","$71beacfda1c55ad5$export$2e2bcd8739ae039","url","accept","priority","plugins","Referer","$2ea54802ff235eaa$var$startStreaming","response","onData","delayTimeout","ok","status","reader","body","getReader","decoder","TextDecoder","buffer","seenChunks","Set","shouldContinue","done","value","read","push","decode","stream","clearTimeout","setTimeout","$2ea54802ff235eaa$var$processChunks","chunks","combinedChunks","join","split","chunkAccumulator","chunk","replace","trim","undefined","add","includes","chunkObj","JSON","parse","choices","content","delta","gpt","error","console","length","$10d1496780f6ca5d$export$2e2bcd8739ae039","fetch","method","headers","stringify","model","data","json","$9b1d5137d285263c$export$2e2bcd8739ae039","id","Array","map","Math","floor","random","previewToken","userId","toString","substring","codeModelMode","agentMode","trendingAgentMode","isMicMode","isChromeExt","githubToken","clickedAnswer2","clickedAnswer3","clickedForceWebSearch","webSearch","visitFromDelta","mode","credentials","rawText","text","lastIndex","lastIndexOf","slice","$8824f8b914f6e435$export$2e2bcd8739ae039","proxyUrl","use_proxy","usesearch","temperature","max_tokens","captchaToken","charAt","jsonData","message","e","$a3a208012d4d610b$export$2e2bcd8739ae039","aiObj","ai","createTextSession","promptInt","prompt","$a1789958d8e560d4$export$2e2bcd8739ae039","ollama_url","responseData","$57fcb06843e3035b$export$2e2bcd8739ae039","presence_penalty","frequency_penalty","top_p","errorText","$e1a05ac3e6410dda$export$2e2bcd8739ae039","imageGeneration","$a8925bf84820b1ab$var$PROVIDERS","Aryahcr","BlackBox","Nextway","Chrome","Ollama","Alibaba","DALLE2","cleanedResponse","textResponse","code","images","StableDiffusion","prompt_negative","width","height","sampling_method","sampling_steps","cfg_scale","$a8925bf84820b1ab$export$2e2bcd8739ae039","createProvider","providerName","Provider","$35da740d59af89ba$var$chatBox","document","getElementById","$35da740d59af89ba$var$chatForm","$35da740d59af89ba$var$chatInput","$35da740d59af89ba$var$options","provider","$35da740d59af89ba$var$provider","$35da740d59af89ba$var$chatHistory","role","$35da740d59af89ba$var$addMessage","type","messageEl","createElement","classList","textContent","appendChild","scrollTop","scrollHeight","addEventListener","event","preventDefault","userMessage","log","botMessages","getElementsByClassName","lastBotMessage"],"version":3,"file":"index.ba3f2a4d.js.map"}